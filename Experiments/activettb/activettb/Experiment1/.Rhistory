se3<-predict(m3, Xnew, se.fit=TRUE)$se.fit
se4<-predict(m4, Xnew, se.fit=TRUE)$se.fit
thomp<-data.frame(sim1=rnorm(1000,mu1,se1),
sim2=rnorm(1000,mu2,se2),
sim3=rnorm(1000,mu3,se3),
sim4=rnorm(1000,mu4,se4))
thompranks<-t(apply(thomp,1,rank))
myranks<-apply(thompranks,2,function(x){ifelse(x==4,1,0)})
pmax<-apply(myranks,2,mean)
t1<-pmax[[1]]
t2<-pmax[[2]]
t3<-pmax[[3]]
t4<-pmax[[4]]
dummy<-data.frame(p=rep(0,4), choice=rep(0,4))
dummy$p[1]<-t1/(t1+t2+t3+t4)
dummy$p[2]<-t2/(t1+t2+t3+t4)
dummy$p[3]<-t3/(t1+t2+t3+t4)
dummy$p[4]<-t4/(t1+t2+t3+t4)
if (chosen[i]==1){
dummy$choice[1]<-1
X1<-rbind(X1,Xnew)
m1<-glm(y~x1+x2+x3, data=X1)
}
if (chosen[i]==2){
dummy$choice[2]<-1
X2<-rbind(X2,Xnew)
m2<-glm(y~x1+x2+x3, data=X2)
}
if (chosen[i]==3){
dummy$choice[3]<-1
X3<-rbind(X3,Xnew)
m3<-glm(y~x1+x2+x3, data=X3)
}
if (chosen[i]==4){
dummy$choice[4]<-1
X4<-rbind(X4,Xnew)
m4<-glm(y~x1+x2+x3, data=X4)
}
d<-rbind(d,dummy)
}
regtom<-AIC(glm(choice~p, data=d, family="binomial"))
#########################################################################################
#GP-UCB
library(tgp)
y1<-y2<-y3<-y4<-rnorm(10,50,20)
X1<-X2<-X3<-X4<-data.frame(y=rnorm(10,50,20),
x1=sample(c(-1,1),10, replace=TRUE),
x2=sample(c(-1,1),10, replace=TRUE),
x3=sample(c(-1,1),10, replace=TRUE))
prob<-rep(0,length(chosen))
d<-data.frame(p=is.numeric(1), choice=is.numeric(1))
for (i in 1:length(chosen)){
Xnew<-data.frame(y=y[i],x1=x1[i],x2=x2[i],x3=x3[i])
out1<-bgp(X=X1[,2:4], Z=X1$y, XX=Xnew[,2:4])
out2<-bgp(X=X2[,2:4], Z=X2$y, XX=Xnew[,2:4])
out3<-bgp(X=X3[,2:4], Z=X3$y, XX=Xnew[,2:4])
out4<-bgp(X=X4[,2:4], Z=X4$y, XX=Xnew[,2:4])
mu1<-out1$ZZ.mean
mu2<-out2$ZZ.mean
mu3<-out3$ZZ.mean
mu4<-out4$ZZ.mean
se1<-sqrt(out1$ZZ.vark)
se2<-sqrt(out2$ZZ.vark)
se3<-sqrt(out3$ZZ.vark)
se4<-sqrt(out4$ZZ.vark)
thomp<-data.frame(sim1=rnorm(1000,mu1,se1),
sim2=rnorm(1000,mu2,se2),
sim3=rnorm(1000,mu3,se3),
sim4=rnorm(1000,mu4,se4))
thompranks<-t(apply(thomp,1,rank))
myranks<-apply(thompranks,2,function(x){ifelse(x==4,1,0)})
pmax<-apply(myranks,2,mean)
t1<-pmax[[1]]
t2<-pmax[[2]]
t3<-pmax[[3]]
t4<-pmax[[4]]
dummy<-data.frame(p=rep(0,4), choice=rep(0,4))
dummy$p[1]<-t1/(t1+t2+t3+t4)
dummy$p[2]<-t2/(t1+t2+t3+t4)
dummy$p[3]<-t3/(t1+t2+t3+t4)
dummy$p[4]<-t4/(t1+t2+t3+t4)
if (chosen[i]==1){
dummy$choice[1]<-1
X1<-rbind(X1,Xnew)
}
if (chosen[i]==2){
dummy$choice[2]<-1
X2<-rbind(X2,Xnew)
}
if (chosen[i]==3){
dummy$choice[3]<-1
X3<-rbind(X3,Xnew)
}
if (chosen[i]==4){
dummy$choice[4]<-1
X4<-rbind(X4,Xnew)
}
d<-rbind(d,dummy)
}
gpucb<-AIC(glm(choice~p, data=d, family="binomial"))
#########################################################################################
#GP-Thompson
y1<-y2<-y3<-y4<-rnorm(10,50,20)
X1<-X2<-X3<-X4<-data.frame(y=rnorm(5,50,20),
x1=sample(c(-1,1),10, replace=TRUE),
x2=sample(c(-1,1),10, replace=TRUE),
x3=sample(c(-1,1),10, replace=TRUE))
prob<-rep(0,length(chosen))
d<-data.frame(p=is.numeric(1), choice=is.numeric(1))
for (i in 1:length(chosen)){
Xnew<-data.frame(y=y[i],x1=x1[i],x2=x2[i],x3=x3[i])
out1<-bgp(X=X1[,2:4], Z=X1$y, XX=Xnew[,2:4])
out2<-bgp(X=X2[,2:4], Z=X2$y, XX=Xnew[,2:4])
out3<-bgp(X=X3[,2:4], Z=X3$y, XX=Xnew[,2:4])
out4<-bgp(X=X4[,2:4], Z=X4$y, XX=Xnew[,2:4])
mu1<-out1$ZZ.mean
mu2<-out2$ZZ.mean
mu3<-out3$ZZ.mean
mu4<-out4$ZZ.mean
se1<-sqrt(out1$ZZ.vark)
se2<-sqrt(out2$ZZ.vark)
se3<-sqrt(out3$ZZ.vark)
se4<-sqrt(out4$ZZ.vark)
t1<-mu1+1.96*se1
t2<-mu2+1.96*se2
t3<-mu3+1.96*se3
t4<-mu4+1.96*se4
dummy<-data.frame(p=rep(0,4), choice=rep(0,4))
dummy$p[1]<-t1/(t1+t2+t3+t4)
dummy$p[2]<-t2/(t1+t2+t3+t4)
dummy$p[3]<-t3/(t1+t2+t3+t4)
dummy$p[4]<-t4/(t1+t2+t3+t4)
if (chosen[i]==1){
dummy$choice[1]<-1
X1<-rbind(X1,Xnew)
}
if (chosen[i]==2){
dummy$choice[2]<-1
X2<-rbind(X2,Xnew)
}
if (chosen[i]==3){
dummy$choice[3]<-1
X3<-rbind(X3,Xnew)
}
if (chosen[i]==4){
dummy$choice[4]<-1
X4<-rbind(X4,Xnew)
}
d<-rbind(d,dummy)
}
gptom<-AIC(glm(choice~p, data=d, family="binomial"))
dfinal$Random[k]<-rand
dfinal$MuTrack[k]<-norm
dfinal$LinUCB[k]<-regucb
dfinal$LinThomp[k]<-regtom
dfinal$GPUCB[k]<-gpucb
dfinal$GPThomp[k]<-gptom
}
setwd("/home/hanshalbe/Desktop/contextbandits/Experiment1")
dat<-read.csv("exp1raw.csv", header=TRUE)
names(dat)
setwd("/home/hanshalbe/Desktop/contextbandits/Experiment1")
dat<-read.csv("exp1raw.csv", header=TRUE)
dat<-subset(dat,!is.na(Answer.total))
dfinal<-data.frame(Random=rep(0,nrow(dat)),
MuTrack=rep(0,nrow(dat)),
LinUCB=rep(0,nrow(dat)),
LinThomp=rep(0,nrow(dat)),
GPUCB=rep(0,nrow(dat)),
GPThomp=rep(0,nrow(dat)))
for (k in 1:nrow(dat)){
d<-dat[k,]
chosen<-as.numeric(strsplit(as.character(d$Answer.chosendeck), ",")[[1]])
x1<-as.numeric(strsplit(as.character(d$Answer.sunseen), ",")[[1]])
x2<-as.numeric(strsplit(as.character(d$Answer.rainseen), ",")[[1]])
x3<-as.numeric(strsplit(as.character(d$Answer.tempseen), ",")[[1]])
y<-as.numeric(strsplit(as.character(d$Answer.reward), ",")[[1]])
#########################################################################################
#Bayesian Mean
mb1<-rnorm(10,50,20)
mb2<-rnorm(10,50,20)
mb3<-rnorm(10,50,20)
mb4<-rnorm(10,50,20)
d<-data.frame(p=is.numeric(1), choice=is.numeric(1))
for (i in 1:length(chosen)){
dummy<-data.frame(p=rep(0,4), choice=rep(0,4))
dummy$p[1]<-mean(mb1)/(mean(mb1)+mean(mb2)+mean(mb3)+mean(mb4))
dummy$p[2]<-mean(mb2)/(mean(mb1)+mean(mb2)+mean(mb3)+mean(mb4))
dummy$p[3]<-mean(mb3)/(mean(mb1)+mean(mb2)+mean(mb3)+mean(mb4))
dummy$p[4]<-mean(mb4)/(mean(mb1)+mean(mb2)+mean(mb3)+mean(mb4))
if (chosen[i]==1){
dummy$choice[1]<-1
mb1<-c(mb1,y[i])
}
if (chosen[i]==2){
mb1<-c(mb2,y[i])
dummy$choice[2]<-1
}
if (chosen[i]==3){
mb1<-c(mb3,y[i])
dummy$choice[3]<-1
}
if (chosen[i]==4){
mb1<-c(mb4,y[i])
dummy$choice[4]<-1
}
d<-rbind(d,dummy)
}
norm<-AIC(glm(choice~p, family="binomial", data=d))
#########################################################################################
#Random
d$p<-rep(0.25,nrow(d))
rand<-AIC(glm(choice~p, family="binomial", data=d))
#########################################################################################
#Linear-UCB
y1<-y2<-y3<-y4<-rnorm(10,50,20)
X1<-X2<-X3<-X4<-data.frame(y=rnorm(10,50,20),
x1=sample(c(-1,1),10, replace=TRUE),
x2=sample(c(-1,1),10, replace=TRUE),
x3=sample(c(-1,1),10, replace=TRUE))
m1<-glm(y~x1+x2+x3, data=X1)
m2<-glm(y~x1+x2+x3, data=X2)
m3<-glm(y~x1+x2+x3, data=X3)
m4<-glm(y~x1+x2+x3, data=X4)
prob<-rep(0,length(chosen))
d<-data.frame(p=is.numeric(1), choice=is.numeric(1))
for (i in 1:length(chosen)){
Xnew<-data.frame(y=y[i],x1=x1[i],x2=x2[i],x3=x3[i])
mu1<-predict(m1, Xnew)
mu2<-predict(m2, Xnew)
mu3<-predict(m3, Xnew)
mu4<-predict(m4, Xnew)
se1<-predict(m1, Xnew, se.fit=TRUE)$se.fit
se2<-predict(m2, Xnew, se.fit=TRUE)$se.fit
se3<-predict(m3, Xnew, se.fit=TRUE)$se.fit
se4<-predict(m4, Xnew, se.fit=TRUE)$se.fit
t1<-mu1+1.96*se1
t2<-mu2+1.96*se2
t3<-mu3+1.96*se3
t4<-mu4+1.96*se4
dummy<-data.frame(p=rep(0,4), choice=rep(0,4))
dummy$p[1]<-t1/(t1+t2+t3+t4)
dummy$p[2]<-t2/(t1+t2+t3+t4)
dummy$p[3]<-t3/(t1+t2+t3+t4)
dummy$p[4]<-t4/(t1+t2+t3+t4)
if (chosen[i]==1){
dummy$choice[1]<-1
X1<-rbind(X1,Xnew)
m1<-glm(y~x1+x2+x3, data=X1)
}
if (chosen[i]==2){
dummy$choice[2]<-1
X2<-rbind(X2,Xnew)
m2<-glm(y~x1+x2+x3, data=X2)
}
if (chosen[i]==3){
dummy$choice[3]<-1
X3<-rbind(X3,Xnew)
m3<-glm(y~x1+x2+x3, data=X3)
}
if (chosen[i]==4){
dummy$choice[4]<-1
X4<-rbind(X4,Xnew)
m4<-glm(y~x1+x2+x3, data=X4)
}
d<-rbind(d,dummy)
}
regucb<-AIC(glm(choice~p, data=d, family="binomial"))
#########################################################################################
#Reg-Thompson
y1<-y2<-y3<-y4<-rnorm(10,50,20)
X1<-X2<-X3<-X4<-data.frame(y=rnorm(10,50,20),
x1=sample(c(-1,1),10, replace=TRUE),
x2=sample(c(-1,1),10, replace=TRUE),
x3=sample(c(-1,1),10, replace=TRUE))
m1<-glm(y~x1+x2+x3, data=X1)
m2<-glm(y~x1+x2+x3, data=X2)
m3<-glm(y~x1+x2+x3, data=X3)
m4<-glm(y~x1+x2+x3, data=X4)
prob<-rep(0,length(chosen))
d<-data.frame(p=is.numeric(1), choice=is.numeric(1))
for (i in 1:length(chosen)){
Xnew<-data.frame(y=y[i],x1=x1[i],x2=x2[i],x3=x3[i])
mu1<-predict(m1, Xnew)
mu2<-predict(m2, Xnew)
mu3<-predict(m3, Xnew)
mu4<-predict(m4, Xnew)
se1<-predict(m1, Xnew, se.fit=TRUE)$se.fit
se2<-predict(m2, Xnew, se.fit=TRUE)$se.fit
se3<-predict(m3, Xnew, se.fit=TRUE)$se.fit
se4<-predict(m4, Xnew, se.fit=TRUE)$se.fit
thomp<-data.frame(sim1=rnorm(1000,mu1,se1),
sim2=rnorm(1000,mu2,se2),
sim3=rnorm(1000,mu3,se3),
sim4=rnorm(1000,mu4,se4))
thompranks<-t(apply(thomp,1,rank))
myranks<-apply(thompranks,2,function(x){ifelse(x==4,1,0)})
pmax<-apply(myranks,2,mean)
t1<-pmax[[1]]
t2<-pmax[[2]]
t3<-pmax[[3]]
t4<-pmax[[4]]
dummy<-data.frame(p=rep(0,4), choice=rep(0,4))
dummy$p[1]<-t1/(t1+t2+t3+t4)
dummy$p[2]<-t2/(t1+t2+t3+t4)
dummy$p[3]<-t3/(t1+t2+t3+t4)
dummy$p[4]<-t4/(t1+t2+t3+t4)
if (chosen[i]==1){
dummy$choice[1]<-1
X1<-rbind(X1,Xnew)
m1<-glm(y~x1+x2+x3, data=X1)
}
if (chosen[i]==2){
dummy$choice[2]<-1
X2<-rbind(X2,Xnew)
m2<-glm(y~x1+x2+x3, data=X2)
}
if (chosen[i]==3){
dummy$choice[3]<-1
X3<-rbind(X3,Xnew)
m3<-glm(y~x1+x2+x3, data=X3)
}
if (chosen[i]==4){
dummy$choice[4]<-1
X4<-rbind(X4,Xnew)
m4<-glm(y~x1+x2+x3, data=X4)
}
d<-rbind(d,dummy)
}
regtom<-AIC(glm(choice~p, data=d, family="binomial"))
#########################################################################################
#GP-UCB
library(tgp)
y1<-y2<-y3<-y4<-rnorm(10,50,20)
X1<-X2<-X3<-X4<-data.frame(y=rnorm(10,50,20),
x1=sample(c(-1,1),10, replace=TRUE),
x2=sample(c(-1,1),10, replace=TRUE),
x3=sample(c(-1,1),10, replace=TRUE))
prob<-rep(0,length(chosen))
d<-data.frame(p=is.numeric(1), choice=is.numeric(1))
for (i in 1:length(chosen)){
Xnew<-data.frame(y=y[i],x1=x1[i],x2=x2[i],x3=x3[i])
out1<-bgp(X=X1[,2:4], Z=X1$y, XX=Xnew[,2:4])
out2<-bgp(X=X2[,2:4], Z=X2$y, XX=Xnew[,2:4])
out3<-bgp(X=X3[,2:4], Z=X3$y, XX=Xnew[,2:4])
out4<-bgp(X=X4[,2:4], Z=X4$y, XX=Xnew[,2:4])
mu1<-out1$ZZ.mean
mu2<-out2$ZZ.mean
mu3<-out3$ZZ.mean
mu4<-out4$ZZ.mean
se1<-sqrt(out1$ZZ.vark)
se2<-sqrt(out2$ZZ.vark)
se3<-sqrt(out3$ZZ.vark)
se4<-sqrt(out4$ZZ.vark)
thomp<-data.frame(sim1=rnorm(1000,mu1,se1),
sim2=rnorm(1000,mu2,se2),
sim3=rnorm(1000,mu3,se3),
sim4=rnorm(1000,mu4,se4))
thompranks<-t(apply(thomp,1,rank))
myranks<-apply(thompranks,2,function(x){ifelse(x==4,1,0)})
pmax<-apply(myranks,2,mean)
t1<-pmax[[1]]
t2<-pmax[[2]]
t3<-pmax[[3]]
t4<-pmax[[4]]
dummy<-data.frame(p=rep(0,4), choice=rep(0,4))
dummy$p[1]<-t1/(t1+t2+t3+t4)
dummy$p[2]<-t2/(t1+t2+t3+t4)
dummy$p[3]<-t3/(t1+t2+t3+t4)
dummy$p[4]<-t4/(t1+t2+t3+t4)
if (chosen[i]==1){
dummy$choice[1]<-1
X1<-rbind(X1,Xnew)
}
if (chosen[i]==2){
dummy$choice[2]<-1
X2<-rbind(X2,Xnew)
}
if (chosen[i]==3){
dummy$choice[3]<-1
X3<-rbind(X3,Xnew)
}
if (chosen[i]==4){
dummy$choice[4]<-1
X4<-rbind(X4,Xnew)
}
d<-rbind(d,dummy)
}
gpucb<-AIC(glm(choice~p, data=d, family="binomial"))
#########################################################################################
#GP-Thompson
y1<-y2<-y3<-y4<-rnorm(10,50,20)
X1<-X2<-X3<-X4<-data.frame(y=rnorm(5,50,20),
x1=sample(c(-1,1),10, replace=TRUE),
x2=sample(c(-1,1),10, replace=TRUE),
x3=sample(c(-1,1),10, replace=TRUE))
prob<-rep(0,length(chosen))
d<-data.frame(p=is.numeric(1), choice=is.numeric(1))
for (i in 1:length(chosen)){
Xnew<-data.frame(y=y[i],x1=x1[i],x2=x2[i],x3=x3[i])
out1<-bgp(X=X1[,2:4], Z=X1$y, XX=Xnew[,2:4])
out2<-bgp(X=X2[,2:4], Z=X2$y, XX=Xnew[,2:4])
out3<-bgp(X=X3[,2:4], Z=X3$y, XX=Xnew[,2:4])
out4<-bgp(X=X4[,2:4], Z=X4$y, XX=Xnew[,2:4])
mu1<-out1$ZZ.mean
mu2<-out2$ZZ.mean
mu3<-out3$ZZ.mean
mu4<-out4$ZZ.mean
se1<-sqrt(out1$ZZ.vark)
se2<-sqrt(out2$ZZ.vark)
se3<-sqrt(out3$ZZ.vark)
se4<-sqrt(out4$ZZ.vark)
t1<-mu1+1.96*se1
t2<-mu2+1.96*se2
t3<-mu3+1.96*se3
t4<-mu4+1.96*se4
dummy<-data.frame(p=rep(0,4), choice=rep(0,4))
dummy$p[1]<-t1/(t1+t2+t3+t4)
dummy$p[2]<-t2/(t1+t2+t3+t4)
dummy$p[3]<-t3/(t1+t2+t3+t4)
dummy$p[4]<-t4/(t1+t2+t3+t4)
if (chosen[i]==1){
dummy$choice[1]<-1
X1<-rbind(X1,Xnew)
}
if (chosen[i]==2){
dummy$choice[2]<-1
X2<-rbind(X2,Xnew)
}
if (chosen[i]==3){
dummy$choice[3]<-1
X3<-rbind(X3,Xnew)
}
if (chosen[i]==4){
dummy$choice[4]<-1
X4<-rbind(X4,Xnew)
}
d<-rbind(d,dummy)
}
gptom<-AIC(glm(choice~p, data=d, family="binomial"))
dfinal$Random[k]<-rand
dfinal$MuTrack[k]<-norm
dfinal$LinUCB[k]<-regucb
dfinal$LinThomp[k]<-regtom
dfinal$GPUCB[k]<-gpucb
dfinal$GPThomp[k]<-gptom
}
write.csv(dfinal, "finalcbt.csv")
dfinal
apply(dfinal,1,mean)
apply(dfinal,2,mean)
apply(dfinal,2,mean)
apply(dfinal,2,sd)
apply(dfinal,2,ranks)
apply(dfinal,2,rank)
apply(dfinal,1,rank)
t(apply(dfinal,1,rank))
ifelse(t(apply(dfinal,1,rank))==1,1,0)
apply(ifelse(t(apply(dfinal,1,rank))==1,1,0),2,sum)
apply(dfinal,2,mean)
apply(dfinal,2,sd)
apply(ifelse(t(apply(dfinal,1,rank))==1,1,0),2,sum)
library(ggplot)
library(ggplot2)
m <- ggplot(dat, aes(x=total))
m + geom_histogram()
names(dat)
m <- ggplot(dat, aes(x=Answer.total/150))
m + geom_histogram()
m <- ggplot(dat, aes(x=Answer.total))
m + geom_histogram()
m <- ggplot(dat, aes(x=Answer.total/150))
m + geom_histogram(binwidth=10)
m <- ggplot(dat, aes(x=Answer.total/150))
m + geom_histogram(binwidth=5)
m <- ggplot(dat, aes(x=Answer.total/150))
m + geom_histogram(binwidth=2)
m <- ggplot(dat, aes(x=Answer.total/150))
m + geom_histogram(binwidth=3)
m <- ggplot(dat, aes(x=Answer.total/150))
m + geom_histogram(binwidth=5)
m <- ggplot(dat, aes(x=Answer.total/150))
m + geom_histogram(binwidth=5)+ geom_density()
m <- ggplot(dat, aes(x=Answer.total/150))+ geom_histogram(binwidth=5)+ geom_density()
m
m <- ggplot(dat, aes(x=Answer.total/150))+ geom_histogram(binwidth=5)+  geom_histogram(aes(fill = ..count..))
m
m <- ggplot(dat, aes(x=Answer.total/150))+ geom_histogram(binwidth=5,aes(fill = ..count..))
m
m <- ggplot(dat, aes(x=Answer.total/150))+ geom_histogram(binwidth=5,aes(fill = ..count..))+gtitle("test")
m <- ggplot(dat, aes(x=Answer.total/150))+ geom_histogram(binwidth=5,aes(fill = ..count..))+ggtitle("test")
m
m <- ggplot(dat, aes(x=Answer.total/150))+ geom_histogram(binwidth=5,aes(fill = ..count..))+ggtitle("Average score per round")+
xlab("Score")+ylab("Count")
m
m <- ggplot(dat, aes(x=Answer.total/150))+ geom_histogram(binwidth=5,aes(fill = ..Count..))+ggtitle("Average score per round")+
xlab("Score")+ylab("Count")
m
m <- ggplot(dat, aes(x=Answer.total/150))+ geom_histogram(binwidth=5,aes(fill = ..count..))+ggtitle("Average score per round")+
xlab("Score")+ylab("Count")
m
pdf("hist1.pdf")
m
dev.off()
dev.off()
names(dat)
dat$Answer.gender
sum(dat$Answer.gender)
sum(dat$Answer.gender, na.rm=T)
dat$Answer.age
mean(dat$Answer.age)
sd(dat$Answer.age)
